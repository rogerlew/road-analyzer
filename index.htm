<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Road Assessment App</title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
  <!-- Leaflet.draw CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"/>
  <style>
    #map { height: 100vh; width: 100%; }
    .fixed-bottom { position: fixed; bottom: 0; width: 100%; z-index: 1000; }
    body { margin: 0; padding: 0; }
  </style>
</head>
<body>
  <!-- Map Container -->
  <div id="map"></div>

  <!-- Control Buttons -->
  <div class="fixed-bottom p-2">
    <button id="drawPath" class="btn btn-primary">Draw Path</button>
    <!-- Removed the Done button -->
    <button id="runAnalysis" class="btn btn-info" style="display: none;">Run Analysis</button>
  </div>

  <!-- "Analysis in Progress" Modal (feedback while running) -->
  <div class="modal fade" id="analysisModal" tabindex="-1" role="dialog" aria-labelledby="analysisModalLabel">
    <div class="modal-dialog modal-sm" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 id="analysisModalLabel">Running Analysis</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">×</button>
        </div>
        <div class="modal-body">
          <p>Please wait while we process your data...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Results Modal -->
  <!-- Use 'modal-xl' to make it wider -->
  <div class="modal fade" id="resultsModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-xl" role="document"> 
      <div class="modal-content">
        <div class="modal-header">
          <!-- Display UTM zone in the title -->
          <h5 class="modal-title">Analysis Results (<span id="utmZoneDisplay"></span>)</h5>
          <button type="button" class="close" data-dismiss="modal">×</button>
        </div>
        <div class="modal-body">
          <table id="resultsTable" class="table table-striped">
            <thead>
              <tr>
                <th>Point ID</th>
                <th>Lng</th>
                <th>Lat</th>
                <th>Easting(ft)</th>
                <th>Northing (ft)</th>
                <th>Elevation (ft)</th>
                <th>Distance (ft)</th>
                <th>Cumulative Distance (ft)</th>
                <th>Grade (%)</th>
                <th>Radius of Curvature (ft)</th>
              </tr>
            </thead>
            <tbody id="resultsTableBody"></tbody>
          </table>
          <button class="btn btn-info" onclick="exportTableToCSV()">Export CSV</button>
          <button class="btn btn-info" onclick="downloadGeoJSON()">Export GeoJSON</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  
  <!-- utmconv.js Library (abbreviated example) -->
  <script>
  var UTMConv = (function () {
      "use strict";
      var DatumInfo = {
          wgs84: { eqrad: 6378137.0, flat: 298.2572236 }
          // add other datums if needed
      };
      function UTMCoords(utmz, easting, northing) {
          this.utmz = utmz;
          this.easting = easting;
          this.northing = northing;
      }
      function DegCoords(latd, lngd, datum) {
          this.latd = latd;
          this.lngd = lngd;
          this.datum = datum || "wgs84";
      }
      DegCoords.prototype.calc_utmz = function () {
          return 1 + Math.floor((this.lngd + 180) / 6);
      };
      DegCoords.prototype.to_utm = function (utmz) {
          var a = DatumInfo[this.datum].eqrad;
          var f = 1 / DatumInfo[this.datum].flat;
          var drad = Math.PI / 180;
          var k0 = 0.9996;
          var b = a * (1 - f);
          var e = Math.sqrt(1 - (b/a)*(b/a));
          var phi = this.latd * drad;
          utmz = utmz || this.calc_utmz();
          var zcm = 3 + 6 * (utmz - 1) - 180;
          var esq = (1 - (b/a)*(b/a));
          var e0sq = e*e / (1 - e*e);
          var N = a / Math.sqrt(1 - Math.pow(e * Math.sin(phi), 2));
          var T = Math.pow(Math.tan(phi), 2);
          var C = e0sq * Math.pow(Math.cos(phi), 2);
          var A = (this.lngd - zcm)*drad * Math.cos(phi);
          var M = phi*(1 - esq*(1/4 + esq*(3/64 + 5*esq/256)));
          M -= Math.sin(2*phi)*(esq*(3/8 + esq*(3/32 + 45*esq/1024)));
          M += Math.sin(4*phi)*(esq*esq*(15/256 + esq*45/1024));
          M -= Math.sin(6*phi)*(esq*esq*esq*(35/3072));
          M = M*a;
          var x = k0*N*A*(1 + A*A*((1-T+C)/6 + A*A*(5-18*T+T*T+72*C-58*e0sq)/120)) + 500000;
          var y = k0*(M + N*Math.tan(phi)*(A*A/2 + A*A*A*A*((5 - T + 9*C + 4*C*C)/24 +
                   A*A*(61-58*T + T*T+600*C-330*e0sq)/720)));
          return new UTMCoords(utmz, x, y);
      };
      return { UTMCoords: UTMCoords, DegCoords: DegCoords };
  })();
  </script>

  <!-- Main Script -->
  <script>
  // Initialize Leaflet map
  const map = L.map('map').setView([47, -117], 13);
  
  var terrain = L.tileLayer("https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}", {
      maxZoom: 20,
      subdomains: ["mt0","mt1","mt2","mt3"]
  }).addTo(map);

  var satellite = L.tileLayer("https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}", {
      maxZoom: 20,
      subdomains: ["mt0","mt1","mt2","mt3"]
  });

  var baseMaps = { "Satellite": satellite, "Terrain": terrain };
  L.control.layers(baseMaps).addTo(map);

  // Drawing layer
  const drawnItems = new L.FeatureGroup().addTo(map);
  const drawControl = new L.Control.Draw({
    draw: null,
    edit: { featureGroup: drawnItems }
  });
  map.addControl(drawControl);

  let pathLayer = null;
  let utmZone = null; // store the chosen UTM zone

  // Handle drawing events
  map.on('draw:created', (e) => {
    pathLayer = e.layer;
    drawnItems.addLayer(pathLayer);
    // Hide "Draw Path" button, show "Run Analysis" button
    document.getElementById('drawPath').style.display = 'none';
    document.getElementById('runAnalysis').style.display = 'inline';
  });

  // Start drawing when user clicks "Draw Path"
  document.getElementById('drawPath').addEventListener('click', () => {
    new L.Draw.Polyline(map, { shapeOptions: { color: 'red' } }).enable();
  });

  var results = null;

  // Run analysis
  document.getElementById('runAnalysis').addEventListener('click', async () => {
    if (!pathLayer) return alert('Please draw a path first.');
    
    // Show "analysis in progress" modal
    $('#analysisModal').modal('show');

    try {
      const latlngs = pathLayer.getLatLngs();
      const points = await fetchElevations(latlngs);
      const projectedPoints = projectCoordinates(points);
      results = calculateMetrics(projectedPoints);
      displayResults(results);
    } catch (err) {
      console.error(err);
      alert('Error during analysis.');
    }

    // Hide the "analysis in progress" modal once done
    $('#analysisModal').modal('hide');
  });

  // Fetch elevation data
  async function fetchElevations(latlngs) {
    const points = [];
    for (const latlng of latlngs) {
      const url = `https://epqs.nationalmap.gov/v1/json?x=${latlng.lng}&y=${latlng.lat}&wkid=4326&units=Feet&includeDate=false`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        points.push({
          lng: latlng.lng,
          lat: latlng.lat,
          elevation: data.value
        });
      } catch (error) {
        console.error('Error fetching elevation:', error);
        points.push({ lng: latlng.lng, lat: latlng.lat, elevation: null });
      }
    }
    return points;
  }

  // Project coordinates to UTM (in feet)
  function projectCoordinates(points) {
    // Determine single UTM zone from the most westward point
    const mostWestward = points.reduce((min, p) => p.lng < min.lng ? p : min, points[0]);
    const degWest = new UTMConv.DegCoords(mostWestward.lat, mostWestward.lng);
    utmZone = degWest.calc_utmz(); // store it globally for display

    // Convert all points using the same zone
    return points.map(point => {
      const degCoords = new UTMConv.DegCoords(point.lat, point.lng);
      const utmCoords = degCoords.to_utm(utmZone);
      const x = utmCoords.easting * 3.28084; // meters to feet
      const y = utmCoords.northing * 3.28084;
      return { ...point, x, y };
    });
  }

  // Calculate distance, cumulative distance, grade, angle
  function calculateMetrics(points) {
    const results = [];
    let cumulative = 0; // track cumulative distance

    for (let i = 0; i < points.length; i++) {
      const pt = points[i];
      let distance = 0;       // distance from previous to current
      let grade = null;       // slope from current to next
      let radius = null;      // turn radius at current
      if (i === 0) {
        // first point => distance=0
        distance = 0;
      } else {
        const prev = points[i - 1];
        distance = Math.sqrt(Math.pow(pt.x - prev.x, 2) + Math.pow(pt.y - prev.y, 2));
      }
      cumulative += distance; // add the segment distance to total

      // Calculate grade to next
      if (i < points.length - 1) {
        const next = points[i + 1];
        const segDist = Math.sqrt(Math.pow(next.x - pt.x, 2) + Math.pow(next.y - pt.y, 2));
        grade = ((next.elevation - pt.elevation) / segDist) * 100;
      }

      // Calculate turn angle (with previous + next)
      if (i > 0 && i < points.length - 1) {
        const prev = points[i - 1];
        const next = points[i + 1];
        radius = calculateCurvatureRadius(prev, pt, next);
      }

      results.push({ 
        ...pt, 
        distance, 
        cumulative, 
        grade, 
        radius 
      });
    }
    return results;
  }
  
  function distance2D(A, B) {
    const dx = B.x - A.x;
    const dy = B.y - A.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  // Radius of curvature for three points
  function calculateCurvatureRadius(A, B, C) {
    // Distances
    const AB = distance2D(A, B);
    const BC = distance2D(B, C);
    const CA = distance2D(C, A);

    // Triangle area using cross product in 2D
    // area = |(AB x AC)| / 2
    // We'll compute coordinates relative to A
    const Ax = A.x, Ay = A.y;
    const Bx = B.x, By = B.y;
    const Cx = C.x, Cy = C.y;

    const areaTwice = Math.abs(
      (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax)
    );
    const area = areaTwice / 2;

    // If area is nearly zero => radius is huge or undefined
    if (area < 1e-9) return null; // or "N/A"

    // Radius = (AB * BC * CA) / (4 * area)
    const radius = (AB * BC * CA) / (4 * area);
    return radius;
  }

  // Display results in the modal
  function displayResults(results) {
    // Show which UTM zone we used
    document.getElementById('utmZoneDisplay').textContent = `UTM Zone ${utmZone}`;

    // Populate table
    const tableBody = document.getElementById('resultsTableBody');
    tableBody.innerHTML = '';
    results.forEach((res, i) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${i + 1}</td>
        <td>${res.lng.toFixed(6)}</td>
        <td>${res.lat.toFixed(6)}</td>
        <td>${res.x.toFixed(2)}</td>
        <td>${res.y.toFixed(2)}</td>
        <td>${res.elevation ? res.elevation.toFixed(2) : 'N/A'}</td>
        <td>${res.distance.toFixed(0)}</td>
        <td>${res.cumulative.toFixed(0)}</td>
        <td>${res.grade ? res.grade.toFixed(2) : 'N/A'}</td>
        <td>${res.radius ? res.radius.toFixed(2) : 'N/A'}</td>
      `;
      tableBody.appendChild(row);
    });
    // Show results
    $('#resultsModal').modal('show');
  }

  function downloadCSV(csv, filename) {
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    }

    function exportTableToCSV(filename = 'road-assessment.csv') {
    const csv = [];
    const rows = document.querySelectorAll('#resultsTable tr');

    rows.forEach(row => {
        const rowData = [];
        const cols = row.querySelectorAll('th, td');
        cols.forEach(col => {
        // Escape quotes
        const data = col.innerText.replace(/"/g, '""');
        rowData.push(`"${data}"`);
        });
        csv.push(rowData.join(','));
    });

    downloadCSV(csv.join('\n'), filename);
  }

  function exportTableToGeoJSON() {
    // Extract header names from the table
    const headers = Array.from(document.querySelectorAll('#resultsTable thead th'))
        .map(th => th.innerText.trim());
    const rows = document.querySelectorAll('#resultsTable tbody tr');
    const geojson = {
        type: "FeatureCollection",
        features: []
    };

    rows.forEach(row => {
        const cells = row.querySelectorAll('td');
        const properties = {};
        cells.forEach((cell, index) => {
        let value = cell.innerText.trim();
        // Attempt numeric conversion if applicable
        const num = parseFloat(value);
        if (!isNaN(num) && value !== "") {
            value = num;
        }
        properties[headers[index]] = value;
        });

        // Assuming Lng and Lat are the 2nd and 3rd columns (indexes 1 and 2)
        const lng = parseFloat(cells[1].innerText.trim());
        const lat = parseFloat(cells[2].innerText.trim());
        const feature = {
        type: "Feature",
        geometry: {
            type: "Point",
            coordinates: [lng, lat]
        },
        properties: properties
        };

        geojson.features.push(feature);
    });

    return JSON.stringify(geojson, null, 2);
    }

    function downloadGeoJSON(filename = 'road-assessment.geojson') {
        const geojsonData = exportTableToGeoJSON();
        const blob = new Blob([geojsonData], { type: 'application/json;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
  </script>
</body>
</html>

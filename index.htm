<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Road Assessment App</title>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <!-- Leaflet.draw CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <style>
        #map { height: 100vh; width: 100%; }
        .fixed-bottom { position: fixed; bottom: 0; width: 100%; z-index: 1000; }
        body { margin: 0; padding: 0; }
    </style>
</head>
<body>
    <!-- Map Container -->
    <div id="map"></div>

    <!-- Control Buttons -->
    <div class="fixed-bottom p-2">
        <button id="drawPath" class="btn btn-primary">Draw Path</button>
        <button id="doneDrawing" class="btn btn-success" style="display: none;">Done</button>
        <button id="runAnalysis" class="btn btn-info" style="display: none;">Run Analysis</button>
    </div>

    <!-- Results Modal -->
    <div class="modal fade" id="resultsModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Analysis Results</h5>
                    <button type="button" class="close" data-dismiss="modal">×</button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Point ID</th>
                                <th>Lng</th>
                                <th>Lat</th>
                                <th>X (ft)</th>
                                <th>Y (ft)</th>
                                <th>Elevation (ft)</th>
                                <th>Distance (ft)</th>
                                <th>Grade (%)</th>
                                <th>Turn Angle (°)</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTable"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    
    <!-- utmconv.js Library -->
    <script>
    var UTMConv = (function () {
        "use strict";

        var DatumInfo = {
            wgs84         : { eqrad : 6378137.0, flat : 298.2572236 },
            nad83         : { eqrad : 6378137.0, flat : 298.2572236 },
            grs80         : { eqrad : 6378137.0, flat : 298.2572215 },
            wgs72         : { eqrad : 6378135.0, flat : 298.2597208 },
            aust1965      : { eqrad : 6378160.0, flat : 298.2497323 },
            krasovsky1940 : { eqrad : 6378245.0, flat : 298.2997381 },
            na1927        : { eqrad : 6378206.4, flat : 294.9786982 },
            intl1924      : { eqrad : 6378388.0, flat : 296.9993621 },
            hayford1909   : { eqrad : 6378388.0, flat : 296.9993621 },
            clarke1880    : { eqrad : 6378249.1, flat : 293.4660167 },
            clarke1866    : { eqrad : 6378206.4, flat : 294.9786982 },
            airy1830      : { eqrad : 6377563.4, flat : 299.3247788 },
            bessel1841    : { eqrad : 6377397.2, flat : 299.1527052 },
            everest1830   : { eqrad : 6377276.3, flat : 300.8021499 }
        };

        function UTMCoords(utmz, easting, northing) {
            this.utmz = utmz;
            this.easting = easting;
            this.northing = northing;
        }

        UTMCoords.prototype.toString = function () {
            return "Zone " + this.utmz + " Easting " + this.easting + " Northing " + this.northing;
        };

        function DegCoords(latd, lngd, datum) {
            this.latd = latd;
            this.lngd = lngd;
            this.datum = datum || "wgs84";
        }

        DegCoords.prototype.calc_utmz = function () {
            return 1 + Math.floor((this.lngd + 180) / 6);
        };

        DegCoords.prototype.toString = function () {
            return this.latd + ", " + this.lngd;
        };

        DegCoords.prototype.to_utm = function (utmz) {
            var a = DatumInfo[this.datum].eqrad;
            var f = 1 / DatumInfo[this.datum].flat;
            var drad = Math.PI / 180;
            var k0 = 0.9996;
            var b = a * (1 - f);
            var e = Math.sqrt(1 - (b / a) * (b / a));
            var phi = this.latd * drad;
            utmz = utmz || this.calc_utmz();
            var zcm = 3 + 6 * (utmz - 1) - 180;
            var esq = (1 - (b / a) * (b / a));
            var e0sq = e * e / (1 - e * e);
            var N = a / Math.sqrt(1 - Math.pow(e * Math.sin(phi), 2));
            var T = Math.pow(Math.tan(phi), 2);
            var C = e0sq * Math.pow(Math.cos(phi), 2);
            var A = (this.lngd - zcm) * drad * Math.cos(phi);
            var M = phi * (1 - esq * (1 / 4 + esq * (3 / 64 + 5 * esq / 256)));
            M = M - Math.sin(2 * phi) * (esq * (3 / 8 + esq * (3 / 32 + 45 * esq / 1024)));
            M = M + Math.sin(4 * phi) * (esq * esq * (15 / 256 + esq * 45 / 1024));
            M = M - Math.sin(6 * phi) * (esq * esq * esq * (35 / 3072));
            M = M * a;
            var M0 = 0;
            var x = k0 * N * A * (1 + A * A * ((1 - T + C) / 6 + A * A * (5 - 18 * T + T * T + 72 * C - 58 * e0sq) / 120));
            x = x + 500000;
            var y = k0 * (M - M0 + N * Math.tan(phi) * (A * A * (1 / 2 + A * A * ((5 - T + 9 * C + 4 * C * C) / 24 + A * A * (61 - 58 * T + T * T + 600 * C - 330 * e0sq) / 720))));
            return new UTMCoords(utmz, x, y);
        };

        UTMCoords.prototype.to_degmin = function (datum) {
            return this.to_deg(datum).to_degmin();
        };

        UTMCoords.prototype.to_deg = function (datum) {
            datum = datum || "wgs84";
            var a = DatumInfo[datum].eqrad;
            var f = 1 / DatumInfo[datum].flat;
            var drad = Math.PI / 180;
            var k0 = 0.9996;
            var b = a * (1 - f);
            var e = Math.sqrt(1 - (b / a) * (b / a));
            var esq = (1 - (b / a) * (b / a));
            var e0sq = e * e / (1 - e * e);
            var x = this.easting;
            var y = this.northing;
            var zcm = 3 + 6 * (this.utmz - 1) - 180;
            var e1 = (1 - Math.sqrt(1 - e * e)) / (1 + Math.sqrt(1 - e * e));
            var M0 = 0;
            var M = M0 + y / k0;
            var mu = M / (a * (1 - esq * (1 / 4 + esq * (3 / 64 + 5 * esq / 256))));
            var phi1 = mu + e1 * (3 / 2 - 27 * e1 * e1 / 32) * Math.sin(2 * mu) + e1 * e1 * (21 / 16 - 55 * e1 * e1 / 32) * Math.sin(4 * mu);
            phi1 = phi1 + e1 * e1 * e1 * (Math.sin(6 * mu) * 151 / 96 + e1 * Math.sin(8 * mu) * 1097 / 512);
            var C1 = e0sq * Math.pow(Math.cos(phi1), 2);
            var T1 = Math.pow(Math.tan(phi1), 2);
            var N1 = a / Math.sqrt(1 - Math.pow(e * Math.sin(phi1), 2));
            var R1 = N1 * (1 - e * e) / (1 - Math.pow(e * Math.sin(phi1), 2));
            var D = (x - 500000) / (N1 * k0);
            var phi = (D * D) * (1 / 2 - D * D * (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * e0sq) / 24);
            phi = phi + Math.pow(D, 6) * (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * e0sq - 3 * C1 * C1) / 720;
            phi = phi1 - (N1 * Math.tan(phi1) / R1) * phi;
            var lng = D * (1 + D * D * ((-1 - 2 * T1 - C1) / 6 + D * D * (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * e0sq + 24 * T1 * T1) / 120)) / Math.cos(phi1);
            var lngd = zcm + lng / drad;
            return new DegCoords(phi / drad, lngd, datum);
        };

        function DegMinCoords(latdir, latdeg, latmin, lngdir, lngdeg, lngmin, datum) {
            this.datum = datum || "wgs84";
            this.latdir = latdir;
            this.latdeg = latdeg;
            this.latmin = latmin;
            this.lngdir = lngdir;
            this.lngdeg = lngdeg;
            this.lngmin = lngmin;
        }

        DegCoords.prototype.to_degmin = function () {
            var latd = this.latd;
            var lngd = this.lngd;
            var latdir = "N";
            if (latd < 0) {
                latdir = "S";
                latd = -latd;
            }
            var latdeg = Math.floor(latd);
            var latmin = 60.0 * (latd - latdeg);
            var lngdir = "E";
            if (lngd < 0) {
                lngdir = "W";
                lngd = -lngd;
            }
            var lngdeg = Math.floor(lngd);
            var lngmin = 60.0 * (lngd - lngdeg);
            return new DegMinCoords(latdir, latdeg, latmin, lngdir, lngdeg, lngmin, this.datum);
        };

        DegMinCoords.prototype.to_utm = function (utmz) {
            return this.to_deg().to_utm(utmz);
        };

        DegMinCoords.prototype.to_deg = function () {
            var latd = this.latdeg + this.latmin / 60.0;
            if ("S" === this.latdir || "s" === this.latdir) {
                latd = -latd;
            }
            var lngd = this.lngdeg + this.lngmin / 60.0;
            if ("W" === this.lngdir || "w" === this.lngdir) {
                lngd = -lngd;
            }
            return new DegCoords(latd, lngd, this.datum);
        };

        DegMinCoords.prototype.toString = function () {
            return this.latdir + " " + this.latdeg + " " + this.latmin + " " + this.lngdir + " " + this.lngdeg + " " + this.lngmin;
        };

        return { UTMCoords : UTMCoords, DegCoords : DegCoords, DegMinCoords : DegMinCoords };
    })();
    </script>

    <!-- Main Application Script -->
    <script>

    // Initialize Leaflet map
    const map = L.map('map').setView([47, -117], 13); // Default center (example location)
  
    var terrain = L.tileLayer("https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}", {
        maxZoom: 20,
        subdomains: ["mt0", "mt1", "mt2", "mt3"]
    }).addTo(map);

    var satellite = L.tileLayer("https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}", {
        maxZoom: 20,
        subdomains: ["mt0", "mt1", "mt2", "mt3"]
    });

    var baseMaps = {
            "Satellite": satellite,
            "Terrain": terrain,
    };
    
    L.control.layers(baseMaps).addTo(map);

    

    // Set up drawing layer
    const drawnItems = new L.FeatureGroup().addTo(map);
    const drawControl = new L.Control.Draw({
        draw: null,
        edit: { featureGroup: drawnItems }
    });
    map.addControl(drawControl);

    let pathLayer = null;

    // Handle drawing events
    map.on('draw:created', (e) => {
        pathLayer = e.layer;
        drawnItems.addLayer(pathLayer);
        document.getElementById('drawPath').style.display = 'none';
        document.getElementById('doneDrawing').style.display = 'inline';
    });

    // Button event listeners
    document.getElementById('drawPath').addEventListener('click', () => {
        new L.Draw.Polyline(map).enable();
    });

    document.getElementById('doneDrawing').addEventListener('click', () => {
        document.getElementById('doneDrawing').style.display = 'none';
        document.getElementById('runAnalysis').style.display = 'inline';
    });

    document.getElementById('runAnalysis').addEventListener('click', async () => {
        if (!pathLayer) return alert('Please draw a path first.');
        const latlngs = pathLayer.getLatLngs();
        const points = await fetchElevations(latlngs);
        const projectedPoints = projectCoordinates(points);
        const results = calculateMetrics(projectedPoints);
        displayResults(results);
    });

    // Fetch elevation data from USGS
    async function fetchElevations(latlngs) {
        const points = [];
        for (const latlng of latlngs) {
            const url = `https://epqs.nationalmap.gov/v1/json?x=${latlng.lng}&y=${latlng.lat}&wkid=4326&units=Feet&includeDate=false`;
            try {
                const response = await fetch(url);
                const data = await response.json();
                points.push({
                    lng: latlng.lng,
                    lat: latlng.lat,
                    elevation: data.value
                });
            } catch (error) {
                console.error('Error fetching elevation:', error);
                points.push({ lng: latlng.lng, lat: latlng.lat, elevation: null });
            }
        }
        return points;
    }

    // Project coordinates to UTM and convert to feet using utmconv.js
    function projectCoordinates(points) {
        // Find the most westward point to determine UTM zone
        const mostWestwardPoint = points.reduce((min, p) => p.lng < min.lng ? p : min, points[0]);
        const degCoordsWest = new UTMConv.DegCoords(mostWestwardPoint.lat, mostWestwardPoint.lng);
        const utmZone = degCoordsWest.calc_utmz();

        // Convert all points to UTM coordinates in the same zone
        return points.map(point => {
            const degCoords = new UTMConv.DegCoords(point.lat, point.lng);
            const utmCoords = degCoords.to_utm(utmZone);
            const x = utmCoords.easting * 3.28084; // Convert meters to feet
            const y = utmCoords.northing * 3.28084; // Convert meters to feet
            return {
                ...point,
                x,
                y
            };
        });
    }

    // Calculate distance, grade, and turn angle
    function calculateMetrics(points) {
        const results = [];
        for (let i = 0; i < points.length; i++) {
            const point = points[i];
            let distance = 0;
            let grade = null;
            let angle = null;

            if (i > 0) {
                const prev = points[i - 1];
                distance = Math.sqrt(
                    Math.pow(point.x - prev.x, 2) + Math.pow(point.y - prev.y, 2)
                );
            }

            if (i < points.length - 1) {
                const next = points[i + 1];
                const segmentDistance = Math.sqrt(
                    Math.pow(next.x - point.x, 2) + Math.pow(next.y - point.y, 2)
                );
                grade = ((next.elevation - point.elevation) / segmentDistance) * 100;
            }

            if (i > 0 && i < points.length - 1) {
                const prev = points[i - 1];
                const next = points[i + 1];
                angle = calculateTurnAngle(prev, point, next);
            }

            results.push({ ...point, distance, grade, angle });
        }
        return results;
    }

    // Calculate turn angle between three points
    function calculateTurnAngle(A, B, C) {
        const AB = { x: B.x - A.x, y: B.y - A.y };
        const BC = { x: C.x - B.x, y: C.y - B.y };
        const dotProduct = AB.x * BC.x + AB.y * BC.y;
        const magAB = Math.sqrt(AB.x * AB.x + AB.y * AB.y);
        const magBC = Math.sqrt(BC.x * BC.x + BC.y * BC.y);
        const cosTheta = dotProduct / (magAB * magBC);
        const angleRad = Math.acos(Math.min(Math.max(cosTheta, -1), 1)); // Clamp to avoid NaN
        return (angleRad * 180) / Math.PI; // Convert to degrees
    }

    // Display results in the modal
    function displayResults(results) {
        const tableBody = document.getElementById('resultsTable');
        tableBody.innerHTML = '';
        results.forEach((result, i) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${i + 1}</td>
                <td>${result.lng.toFixed(6)}</td>
                <td>${result.lat.toFixed(6)}</td>
                <td>${result.x.toFixed(2)}</td>
                <td>${result.y.toFixed(2)}</td>
                <td>${result.elevation ? result.elevation.toFixed(2) : 'N/A'}</td>
                <td>${result.distance ? result.distance.toFixed(2) : 'N/A'}</td>
                <td>${result.grade ? result.grade.toFixed(2) : 'N/A'}</td>
                <td>${result.angle ? result.angle.toFixed(2) : 'N/A'}</td>
            `;
            tableBody.appendChild(row);
        });
        $('#resultsModal').modal('show');
    }
    </script>
</body>
</html>
​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
